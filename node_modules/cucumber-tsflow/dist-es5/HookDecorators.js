'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

(function (factory) {
    if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {
        var v = factory(require, exports);if (v !== undefined) module.exports = v;
    } else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", "./BindingRegistry", "./StepBinding", "./Callsite"], factory);
    }
})(function (require, exports) {
    "use strict";

    var BindingRegistry_1 = require("./BindingRegistry");
    var StepBinding_1 = require("./StepBinding");
    var Callsite_1 = require("./Callsite");
    /**
     * A method decorator that marks the associated function as a 'Before Scenario' step. The function is
     * executed before each scenario.
     *
     * @param tag An optional tag.
     */
    function before(tag) {
        var callsite = Callsite_1.Callsite.capture();
        return function (target, propertyKey, descriptor) {
            var stepBinding = {
                stepPattern: undefined,
                bindingType: StepBinding_1.StepBindingFlags.before,
                targetPrototype: target,
                targetPropertyKey: propertyKey,
                argsLength: target[propertyKey]["length"],
                callsite: callsite
            };
            if (tag) {
                stepBinding.tag = tag[0] === "@" ? tag : '@' + tag;
            }
            BindingRegistry_1.BindingRegistry.instance.registerStepBinding(stepBinding);
            return descriptor;
        };
    }
    exports.before = before;
    /**
     * A method decorator that marks the associated function as an 'After Scenario' step. The function is
     * executed after each scenario.
     *
     * @param tag An optional tag.
     */
    function after(tag) {
        var callsite = Callsite_1.Callsite.capture();
        return function (target, propertyKey, descriptor) {
            var stepBinding = {
                stepPattern: undefined,
                bindingType: StepBinding_1.StepBindingFlags.after,
                targetPrototype: target,
                targetPropertyKey: propertyKey,
                argsLength: target[propertyKey]["length"],
                callsite: callsite
            };
            if (tag) {
                stepBinding.tag = tag[0] === "@" ? tag : '@' + tag;
            }
            BindingRegistry_1.BindingRegistry.instance.registerStepBinding(stepBinding);
            return descriptor;
        };
    }
    exports.after = after;
});
//# sourceMappingURL=HookDecorators.js.map